{"version":3,"sources":["components/Counter/Counter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","state","counter","increment","setState","decrement","console","log","nextProps","nextState","factor","this","prevProps","prevState","className","onClick","icon","subtract16Filled","add16Filled","React","Component","App","mount","mountCounter","unmountCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAOqBA,E,kDAGjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CACTC,QAAS,GAGb,EAAKC,UAAY,kBAAM,EAAKC,SAAS,CAAEF,QAAS,EAAKD,MAAMC,QAAU,KACrE,EAAKG,UAAY,kBAAM,EAAKD,SAAS,CAAEF,QAAS,EAAKD,MAAMC,QAAU,KARvD,E,qDAsBlB,WACII,QAAQC,IAAI,4B,mCAIhB,SAAsBC,EAAWC,GAE7B,QAAGA,EAAUP,QAAUM,EAAUE,QAAU,OACvCC,KAAKP,SAAS,CAACF,QAASS,KAAKV,MAAMC,WAC5B,K,qCAMf,SAAwBU,EAAWC,GAE/B,OADAP,QAAQC,IAAR,6BAAkCM,EAAUX,UACrC,O,gCAIX,WACII,QAAQC,IAAR,8BAAmCI,KAAKV,MAAMC,Y,kCAIlD,WACII,QAAQC,IAAI,sB,oBAIhB,WACG,OACC,0BAASO,UAAU,mDAAnB,UACI,wBACIA,UAAU,uFACVC,QAASJ,KAAKN,UAFlB,SAII,cAAC,OAAD,CAAMW,KAAMC,IAAkBH,UAAU,oBAE5C,mBAAGA,UAAU,gCAAb,SACKH,KAAKV,MAAMC,QAAUS,KAAKX,MAAMU,SAErC,wBACII,UAAU,uFACVC,QAASJ,KAAKR,UAFlB,SAII,cAAC,OAAD,CAAMa,KAAME,IAAaJ,UAAU,0B,uCAzD/C,SAAgCd,EAAOC,GAInC,OAFAK,QAAQC,IAAR,iCAAsCN,EAAMC,QAAUF,EAAMU,SAErD,eACAT,O,GApBsBkB,IAAMC,WC6B5BC,E,kDA/Bb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXqB,OAAO,GAGT,EAAKC,aAAe,kBAAM,EAAKnB,SAAS,CAAEkB,OAAO,KACjD,EAAKE,eAAiB,kBAAM,EAAKpB,SAAS,CAAEkB,OAAO,KAPnC,E,0CAUlB,WACE,OACE,uBAAMR,UAAU,iEAAhB,UACIH,KAAKV,MAAMqB,MAAQ,cAAC,EAAD,CAASZ,OAAQ,KAAS,KAC/C,wBACEI,UAAU,6FACVC,QAASJ,KAAKa,eAFhB,uBAMA,wBACEV,UAAU,0FACVC,QAASJ,KAAKY,aAFhB,2B,GAtBUJ,IAAMC,WCSTK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.94c4947d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//Icons\r\nimport { Icon } from '@iconify/react';\r\nimport add16Filled from '@iconify-icons/fluent/add-16-filled';\r\nimport subtract16Filled from '@iconify-icons/fluent/subtract-16-filled';\r\n\r\nexport default class Counter extends React.Component{\r\n    \r\n    // Constructor\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            counter: 0\r\n        } // Initalize the state\r\n\r\n        this.increment = () => this.setState({ counter: this.state.counter + 1 }) // Increment counter state by 1\r\n        this.decrement = () => this.setState({ counter: this.state.counter - 1 }) // Decrement counter state by 1\r\n    }\r\n    \r\n    // Derivade State from props\r\n    static getDerivedStateFromProps(props, state){\r\n\r\n        console.log(`The next value will be ${state.counter * props.factor}`)\r\n\r\n        return {\r\n            ...state\r\n        }\r\n    }\r\n\r\n    // Component Mounted\r\n    componentDidMount(){\r\n        console.log(\"The counter is ready!!\");\r\n    }\r\n\r\n    // Should update?, only when the (counter*factor) is more than 100\r\n    shouldComponentUpdate(nextProps, nextState){\r\n\r\n        if(nextState.counter * nextProps.factor >= 100){\r\n            this.setState({counter: this.state.counter});\r\n            return false\r\n        }\r\n\r\n        return true // Yes, it should\r\n    }\r\n    // Snapshot\r\n    getSnapshotBeforeUpdate(prevProps, prevState){\r\n        console.log(`Before -> counter: ${prevState.counter}`);\r\n        return null\r\n    }\r\n\r\n    // Component Updated\r\n    componentDidUpdate(){\r\n        console.log(`Current -> counter: ${this.state.counter}`);\r\n    }\r\n\r\n    // Component Unmount\r\n    componentWillUnmount(){\r\n        console.log(\"The counter died\")\r\n    }\r\n\r\n    // Display the counter\r\n    render(){\r\n       return(\r\n        <section className=\"p-2 shadow-md bg-white flex items-center gap-x-1\">\r\n            <button \r\n                className=\"w-10 h-10 flex justify-center items-center bg-gray-200 rounded-md font-bold text-4xl\"\r\n                onClick={this.decrement} // Call it when the button is clicked\r\n            >\r\n                <Icon icon={subtract16Filled} className=\"text-gray-600\"/>\r\n            </button>\r\n            <p className=\"px-3 font-bold text-4xl -mt-1\">\r\n                {this.state.counter * this.props.factor /* Display counter state value*/}\r\n            </p>\r\n            <button \r\n                className=\"w-10 h-10 flex justify-center items-center bg-gray-200 rounded-md font-bold text-4xl\"\r\n                onClick={this.increment}\r\n            >\r\n                <Icon icon={add16Filled} className=\"text-gray-600\"/>\r\n            </button>\r\n        </section>\r\n       )\r\n    };\r\n}","import React from 'react'\nimport Counter from './components/Counter/Counter'\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      mount: false\n    }\n\n    this.mountCounter = () => this.setState({ mount: true });\n    this.unmountCounter = () => this.setState({ mount: false });\n  }\n\n  render(){\n    return (\n      <main className=\"flex flex-col items-center justify-center min-h-screen gap-y-2\">\n        { this.state.mount ? <Counter factor={10} /> : null }\n        <button \n          className=\"bg-red-400 text-2xl w-52 flex justify-center py-2 rounded-md font-semibold text-white mt-2\"\n          onClick={this.unmountCounter}  \n        >\n          Desmontar\n        </button>\n        <button \n          className=\"bg-green-400 text-2xl w-52 flex justify-center py-2 rounded-md font-semibold text-white\"\n          onClick={this.mountCounter}  \n        >\n          Montar\n        </button>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}